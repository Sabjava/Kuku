/etc/yum.repos.d/cobbler-config.repo -> disable http://build01.sm.vindicia.com/cobbler/repo_mirror/epel7-x86_64 repo, it is not set up

yum install -y docker

id_rsa.pub -> .ssh/authorized_keys
scp .ssh/id_rsa* sbogdanova@k8s-04.sm.vindicia.com:.ssh/
sudo vi /etc/sudoers
## Allows people in group wheel to run all commands
#%wheel	ALL=(ALL)	ALL

## Same thing without a password
%wheel	ALL=(ALL)	NOPASSWD: ALL

wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/parallel-ssh/pssh-2.3.1.tar.gz
tar xvfz pssh-2.3.1.tar.gz
cd pssh-2.3.1/
sudo python setup.py install
cd ..

wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
chmod +x cfssl*
sudo cp cfssl_linux-amd64 /usr/local/bin/cfssl
sudo cp cfssljson_linux-amd64 /usr/local/bin/cfssljson
cfssl version

wget https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kubectl
chmod +x kubectl
sudo cp kubectl /usr/local/bin/
kubectl version --client

cat > ca-config.json <<EOF
{
  "signing": {
    "default": {
      "expiry": "8760h"
    },
    "profiles": {
      "kubernetes": {
        "usages": ["signing", "key encipherment", "server auth", "client auth"], 
        "expiry": "8760h"
      }
    }
  }
}
EOF
cat > ca-csr.json <<EOF
{
  "CN": "Kubernetes",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "US",
      "L": "San Mateo",
      "O": "Kubernetes",
      "OU": "CA",
      "ST": "California"
    }
  ]
}
EOF

cfssl gencert -initca ca-csr.json | cfssljson -bare ca
2018/02/03 10:23:59 [INFO] generating a new CA key and certificate from CSR
2018/02/03 10:23:59 [INFO] generate received request
2018/02/03 10:23:59 [INFO] received CSR
2018/02/03 10:23:59 [INFO] generating key: rsa-2048
2018/02/03 10:23:59 [INFO] encoded CSR
2018/02/03 10:23:59 [INFO] signed certificate with serial number 134603534500990672744608350134637839952997163506
ll ca.pem ca-key.pem 
-rw------- 1 sbogdanova Domain Users 1679 Feb  3 10:23 ca-key.pem
-rw-r--r-- 1 sbogdanova Domain Users 1379 Feb  3 10:23 ca.pem

cat >admin-csr.json <<EOF
{
  "CN": "admin",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "US",
      "L": "San Mateo",
      "O": "system:masters",
      "OU": "Kubernetes The Hard Way",
      "ST": "California"
    }
  ]
}
EOF
cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
2018/02/03 10:46:46 [INFO] generate received request
2018/02/03 10:46:46 [INFO] received CSR
2018/02/03 10:46:46 [INFO] generating key: rsa-2048
2018/02/03 10:46:47 [INFO] encoded CSR
2018/02/03 10:46:47 [INFO] signed certificate with serial number 325370894820098095217967981236325687988543290761
2018/02/03 10:46:47 [WARNING] This certificate lacks a "hosts" field. This makes it unsuitable for
websites. For more information see the Baseline Requirements for the Issuance and Management
of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);
specifically, section 10.2.3 ("Information Requirements").
ll admin.pem admin-key.pem
-rw------- 1 sbogdanova Domain Users 1675 Feb  3 10:46 admin-key.pem
-rw-r--r-- 1 sbogdanova Domain Users 1424 Feb  3 10:46 admin.pem

cat > kube-proxy-csr.json <<EOF
{
  "CN": "system:kube-proxy",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "US",
      "L": "San Mateo",
      "O": "system:node-proxier",
      "OU": "Kubernetes",
      "ST": "California"
    }
  ]
}
EOF
cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy
2018/02/03 11:01:12 [INFO] generate received request
2018/02/03 11:01:12 [INFO] received CSR
2018/02/03 11:01:12 [INFO] generating key: rsa-2048
2018/02/03 11:01:12 [INFO] encoded CSR
2018/02/03 11:01:12 [INFO] signed certificate with serial number 180818449611177144126035278048065797757823228616
2018/02/03 11:01:12 [WARNING] This certificate lacks a "hosts" field. This makes it unsuitable for
websites. For more information see the Baseline Requirements for the Issuance and Management
of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);
specifically, section 10.2.3 ("Information Requirements").
ll kube-proxy.pem kube-proxy-key.pem 
-rw------- 1 sbogdanova Domain Users 1679 Feb  3 11:01 kube-proxy-key.pem
-rw-r--r-- 1 sbogdanova Domain Users 1448 Feb  3 11:01 kube-proxy.pem

cat > kubernetes-csr.json <<EOF
{
  "CN": "kubernetes",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "US",
      "L": "San Mateo",
      "O": "Kubernetes",
      "OU": "Kubernetes",
      "ST": "California"
    }
  ]
}
EOF
# 10.32.0.1 + PUBLIC LB VIP address
cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=10.32.0.1,10.30.200.171,10.30.200.172,10.30.200.173,10.30.200.174,127.0.0.1,kubernetes.default -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
2018/02/03 15:44:01 [INFO] generate received request
2018/02/03 15:44:01 [INFO] received CSR
2018/02/03 15:44:01 [INFO] generating key: rsa-2048
2018/02/03 15:44:01 [INFO] encoded CSR
2018/02/03 15:44:01 [INFO] signed certificate with serial number 615513328199188091217422694200281105139805821320
ll kubernetes.pem kubernetes-key.pem 
-rw------- 1 sbogdanova Domain Users 1679 Feb  3 15:44 kubernetes-key.pem
-rw-r--r-- 1 sbogdanova Domain Users 1509 Feb  3 15:44 kubernetes.pem

n=(k8s-01.sm.vindicia.com k8s-02.sm.vindicia.com k8s-03.sm.vindicia.com k8s-04.sm.vindicia.com)
ip=(10.30.200.171 10.30.200.172 10.30.200.173 10.30.200.174)
for i in ${!n[*]}; do
cat > ${n[i]}-csr.json <<EOF
{
  "CN": "system:node:${n[i]}",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
    {
      "C": "US",
      "L": "San Mateo",
      "O": "Kubernetes",
      "OU": "Kubernetes",
      "ST": "California"
    }
  ]
}
EOF
done
for i in ${!n[*]}; do cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=${n[i]},${ip[i]} -profile=kubernetes ${n[i]}-csr.json |  cfssljson -bare ${n[i]}; done
2018/02/03 16:06:53 [INFO] generate received request
2018/02/03 16:06:53 [INFO] received CSR
2018/02/03 16:06:53 [INFO] generating key: rsa-2048
2018/02/03 16:06:53 [INFO] encoded CSR
2018/02/03 16:06:53 [INFO] signed certificate with serial number 366601917994995293873966666114245481676222963126
2018/02/03 16:06:53 [INFO] generate received request
2018/02/03 16:06:53 [INFO] received CSR
2018/02/03 16:06:53 [INFO] generating key: rsa-2048
2018/02/03 16:06:53 [INFO] encoded CSR
2018/02/03 16:06:53 [INFO] signed certificate with serial number 182382319872634807968536924746020922109573969167
2018/02/03 16:06:53 [INFO] generate received request
2018/02/03 16:06:53 [INFO] received CSR
2018/02/03 16:06:53 [INFO] generating key: rsa-2048
2018/02/03 16:06:54 [INFO] encoded CSR
2018/02/03 16:06:54 [INFO] signed certificate with serial number 536647360763370274142191491649174758602995975144
2018/02/03 16:06:54 [INFO] generate received request
2018/02/03 16:06:54 [INFO] received CSR
2018/02/03 16:06:54 [INFO] generating key: rsa-2048
2018/02/03 16:06:55 [INFO] encoded CSR
2018/02/03 16:06:55 [INFO] signed certificate with serial number 154527175138330712060689384191865441139139227458

pscp -h ~/kube-hosts ca.pem ca-key.pem kubernetes.pem kubernetes-key.pem ~/
cat ~/kube-hosts
k8s-01.sm.vindicia.com
k8s-02.sm.vindicia.com
k8s-03.sm.vindicia.com
k8s-04.sm.vindicia.com

KUBERNETES_PUBLIC_ADDRESS=k8s-01.sm.vindicia.com

for instance in $(cat ~/kube-hosts); do
  kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://k8s-01.sm.vindicia.com:6443 --kubeconfig=${instance}.kubeconfig
  kubectl config set-credentials system:node:${instance} --client-certificate=${instance}.pem --client-key=${instance}-key.pem --embed-certs=true --kubeconfig=${instance}.kubeconfig
  kubectl config set-context default --cluster=kubernetes --user=system:node:${instance} --kubeconfig=${instance}.kubeconfig
  kubectl config use-context default --kubeconfig=${instance}.kubeconfig
done
Cluster "kubernetes" set.
User "system:node:k8s-01.sm.vindicia.com" set.
Context "default" created.
Cluster "kubernetes" set.
User "system:node:k8s-02.sm.vindicia.com" set.
Context "default" created.
Cluster "kubernetes" set.
User "system:node:k8s-03.sm.vindicia.com" set.
Context "default" created.
Cluster "kubernetes" set.
User "system:node:k8s-04.sm.vindicia.com" set.
Context "default" created.
Switched to context "default".

kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=https://k8s-01.sm.vindicia.com:6443 --kubeconfig=kube-proxy.kubeconfig
Cluster "kubernetes" set.
kubectl config set-credentials kube-proxy --client-certificate=kube-proxy.pem --client-key=kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig
User "kube-proxy" set.
kubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig
Context "default" created.
kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
Switched to context "default".

for instance in $(cat ~/kube-hosts); do
  scp ${instance}.kubeconfig kube-proxy.kubeconfig ${instance}:~/
done

ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)
cat > encryption-config.yaml <<EOF
kind: EncryptionConfig
apiVersion: v1
resources:
  - resources:
      - secrets
    providers:
      - aescbc:
          keys:
            - name: key1
              secret: ${ENCRYPTION_KEY}
      - identity: {}
EOF
pscp -h ~/kube-hosts encryption-config.yaml ~/

wget --timestamping https://github.com/coreos/etcd/releases/download/v3.2.11/etcd-v3.2.11-linux-amd64.tar.gz
tar xvfz etcd-v3.2.11-linux-amd64.tar.gz
sudo cp etcd-v3.2.11-linux-amd64/etcd* /usr/local/bin/
sudo mkdir -p /etc/etcd /var/lib/etcd
sudo cp ca.pem kubernetes-key.pem kubernetes.pem /etc/etcd/
INTERNAL_IP=10.30.200.174
ETCD_NAME=k8s-04

cat > etcd.service <<EOF
[Unit]
Description=etcd
Documentation=https://github.com/coreos

[Service]
ExecStart=/usr/local/bin/etcd \\
  --name ${ETCD_NAME} \\
  --cert-file=/etc/etcd/kubernetes.pem \\
  --key-file=/etc/etcd/kubernetes-key.pem \\
  --peer-cert-file=/etc/etcd/kubernetes.pem \\
  --peer-key-file=/etc/etcd/kubernetes-key.pem \\
  --trusted-ca-file=/etc/etcd/ca.pem \\
  --peer-trusted-ca-file=/etc/etcd/ca.pem \\
  --peer-client-cert-auth \\
  --client-cert-auth \\
  --initial-advertise-peer-urls https://${INTERNAL_IP}:2380 \\
  --listen-peer-urls https://${INTERNAL_IP}:2380 \\
  --listen-client-urls https://${INTERNAL_IP}:2379,http://127.0.0.1:2379 \\
  --advertise-client-urls https://${INTERNAL_IP}:2379 \\
  --initial-cluster-token etcd-cluster-0 \\
  --initial-cluster ${ETCD_NAME}=https://${INTERNAL_IP}:2380 \\
  --initial-cluster-state new \\
  --data-dir=/var/lib/etcd
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
sudo cp etcd.service /etc/systemd/system/
sudo systemctl daemon-reload
sudo systemctl start etcd.service
ETCDCTL_API=3 etcdctl member list
48c772b3d2c0ee2e, started, k8s-04, https://10.30.200.174:2380, https://10.30.200.174:2379

wget -q --timestamping \
  "https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kube-apiserver" \
  "https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kube-controller-manager" \
  "https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kube-scheduler" \
  "https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kubectl"
chmod +x kube-apiserver kube-controller-manager kube-scheduler kubectl
sudo mv kube-apiserver kube-controller-manager kube-scheduler kubectl /usr/local/bin/
sudo mkdir -p /var/lib/kubernetes/
sudo cp ca.pem ca-key.pem kubernetes-key.pem kubernetes.pem encryption-config.yaml /var/lib/kubernetes/
INTERNAL_IP="10.30.200.174"
cat > kube-apiserver.service <<EOF
[Unit]                                           
Description=Kubernetes API Server
Documentation=https://github.com/kubernetes/kubernetes

[Service]
ExecStart=/usr/local/bin/kube-apiserver \\
  --admission-control=Initializers,NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\
  --advertise-address=${INTERNAL_IP} \\
  --allow-privileged=true \\
  --apiserver-count=3 \\
  --audit-log-maxage=30 \\
  --audit-log-maxbackup=3 \\
  --audit-log-maxsize=100 \\
  --audit-log-path=/var/log/audit.log \\
  --authorization-mode=Node,RBAC \\
  --bind-address=0.0.0.0 \\
  --client-ca-file=/var/lib/kubernetes/ca.pem \\
  --enable-swagger-ui=true \\
  --etcd-cafile=/var/lib/kubernetes/ca.pem \\
  --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \\
  --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \\
  --etcd-servers=https://${INTERNAL_IP}:2379
  --event-ttl=1h \\
  --experimental-encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \\
  --insecure-bind-address=127.0.0.1 \\
  --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \\
  --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \\
  --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \\
  --kubelet-https=true \\
  --runtime-config=api/all \\
  --service-account-key-file=/var/lib/kubernetes/ca-key.pem \\
  --service-cluster-ip-range=10.32.0.0/24 \\
  --service-node-port-range=30000-32767 \\
  --tls-ca-file=/var/lib/kubernetes/ca.pem \\
  --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \\
  --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \\
  --v=2
Restart=on-failure
RestartSec=5


[Install]
WantedBy=multi-user.target
EOF
cat > kube-controller-manager.service <<EOF
[Unit]                                           
Description=Kubernetes Controller Manager
Documentation=https://github.com/kubernetes/kubernetes

[Service]
ExecStart=/usr/local/bin/kube-controller-manager \\
  --address=0.0.0.0 \\
  --cluster-cidr=10.200.0.0/16 \\
  --cluster-name=kubernetes \\
  --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \\
  --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \\
  --leader-elect=true \\
  --master=http://127.0.0.1:8080 \\
  --root-ca-file=/var/lib/kubernetes/ca.pem \\
  --service-account-private-key-file=/var/lib/kubernetes/ca-key.pem \\
  --service-cluster-ip-range=10.32.0.0/24 \\
  --v=2
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

cat > kube-scheduler.service <<EOF
[Unit]                                           
Description=Kubernetes Scheduler
Documentation=https://github.com/kubernetes/kubernetes

[Service]
ExecStart=/usr/local/bin/kube-scheduler \\
  --leader-elect=true \\
  --master=http://127.0.0.1:8080 \\
  --v=2                       
Restart=on-failure                                         
RestartSec=5                                                  
                        
[Install]                          
WantedBy=multi-user.target
EOF 
          
sudo cp kube-apiserver.service kube-scheduler.service kube-controller-manager.service /etc/systemd/system/
sudo systemctl daemon-reload
sudo systemctl enable kube-apiserver kube-controller-manager kube-scheduler
sudo systemctl start kube-apiserver kube-controller-manager kube-scheduler
kubectl get componentstatuses
NAME                 STATUS    MESSAGE              ERROR
scheduler            Healthy   ok                   
controller-manager   Healthy   ok                   
etcd-0               Healthy   {"health": "true"} 

cat <<EOF | kubectl apply -f -
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: system:kube-apiserver-to-kubelet
rules:
  - apiGroups:
      - ""
    resources:
      - nodes/proxy
      - nodes/stats
      - nodes/log
      - nodes/spec
      - nodes/metrics
    verbs:
      - "*"
EOF
clusterrole "system:kube-apiserver-to-kubelet" created

cat <<EOF | kubectl apply -f -
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: system:kube-apiserver
  namespace: ""
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kube-apiserver-to-kubelet
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: kubernetes
EOF
clusterrolebinding "system:kube-apiserver" created

pssh -h kube-hosts sudo yum -y --disablerepo=epel7-x86_64 install socat
wget -q --timestamping \
 https://github.com/containernetworking/plugins/releases/download/v0.6.0/cni-plugins-amd64-v0.6.0.tgz \
 https://github.com/containerd/cri-containerd/releases/download/v1.0.0-beta.1/cri-containerd-1.0.0-beta.1.linux-amd64.tar.gz \
 https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kubectl \
 https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kube-proxy \
 https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kubelet
chmod +x kubectl kube-proxy kubelet
pscp -h ~/kube-workers cni-plugins-amd64-v0.6.0.tgz cri-containerd-1.0.0-beta.1.linux-amd64.tar.gz kubectl kube-proxy kubelet ~/
pssh -h ~/kube-workers sudo mkdir -p /etc/cni/net.d /opt/cni/bin /var/lib/kubelet /var/lib/kube-proxy /var/lib/kubernetes /var/run/kubernetes
pssh -h ~/kube-workers sudo tar -xzf cni-plugins-amd64-v0.6.0.tgz -C /opt/cni/bin/
pssh -h ~/kube-workers sudo tar -xzf cri-containerd-1.0.0-beta.1.linux-amd64.tar.gz -C /
pssh -h ~/kube-workers sudo mv kubectl kube-proxy kubelet /usr/local/bin

POD_CIDR=10.30.200.174/24
cat > 10-bridge.conf <<EOF
{
    "cniVersion": "0.3.1",
    "name": "bridge",
    "type": "bridge",
    "bridge": "cnio0",
    "isGateway": true,
    "ipMasq": true,
    "ipam": {
        "type": "host-local",
        "ranges": [
          [{"subnet": "${POD_CIDR}"}]
        ],
        "routes": [{"dst": "0.0.0.0/0"}]
    }
}
EOF
cat > 99-loopback.conf <<EOF
{
    "cniVersion": "0.3.1",
    "type": "loopback"
}
EOF
pscp -h ~/kube-workers 10-bridge.conf 99-loopback.conf ~/
pssh -h ~/kube-workers sudo mv 10-bridge.conf 99-loopback.conf /etc/cni/net.d/
pssh -h ~/kube-workers sudo cp '$(hostname)'-key.pem '$(hostname)'.pem /var/lib/kubelet/
pssh -h ~/kube-workers sudo cp '$(hostname)'.kubeconfig /var/lib/kubelet/kubeconfig
pssh -h ~/kube-workers sudo cp kube-proxy.kubeconfig /var/lib/kube-proxy/kubeconfig

for h in $(cat ~/kube-workers); do
cat >$h.kubelet.service <<EOF
[Unit]
Description=Kubernetes Kubelet
Documentation=https://github.com/kubernetes/kubernetes
After=cri-containerd.service
Requires=cri-containerd.service

[Service]
ExecStart=/usr/local/bin/kubelet \\
  --allow-privileged=true \\
  --anonymous-auth=false \\
  --authorization-mode=Webhook \\
  --client-ca-file=/var/lib/kubernetes/ca.pem \\
  --cloud-provider= \\
  --cluster-dns=10.32.0.10 \\
  --cluster-domain=cluster.local \\
  --container-runtime=remote \\
  --container-runtime-endpoint=unix:///var/run/cri-containerd.sock \\
  --image-pull-progress-deadline=2m \\
  --kubeconfig=/var/lib/kubelet/kubeconfig \\
  --network-plugin=cni \\
  --register-node=true \\
  --runtime-request-timeout=15m \\
  --tls-cert-file=/var/lib/kubelet/$h.pem \\
  --tls-private-key-file=/var/lib/kubelet/$h-key.pem \\
  --v=2
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
 done
for h in $(cat ~/kube-workers); do
  scp $h.kubelet.service $h:
  ssh $h sudo mv $h.kubelet.service /etc/systemd/system/kubelet.service
done

cat > kube-proxy.service <<EOF
[Unit]
Description=Kubernetes Kube Proxy
Documentation=https://github.com/kubernetes/kubernetes

[Service]
ExecStart=/usr/local/bin/kube-proxy \\
  --cluster-cidr=10.200.0.0/16 \\
  --kubeconfig=/var/lib/kube-proxy/kubeconfig \\
  --proxy-mode=iptables \\
  --v=2
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
pscp -h ~/kube-workers kube-proxy.service ~/
pssh -h ~/kube-workers sudo cp kube-proxy.service /etc/systemd/system/

pssh -h ~/kube-workers sudo systemctl daemon-reload
pssh -h ~/kube-workers sudo systemctl enable containerd cri-containerd kubelet kube-proxy
pssh -h ~/kube-workers sudo systemctl start containerd cri-containerd kubelet kube-proxy
